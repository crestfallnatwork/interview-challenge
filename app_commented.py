# This is a chatbot webapp based on Streamlit. It allows a user to enter a webpage url and query the chatbot about that particular website
# It does so in the follwing steps:
# 1. Extract the text from the provided URL
# 2. Break the text into chunks and store then in as embeddings in Chroma
# 3. Use RAG to fetch the relevant data

# streamlit is used to build the ui
import streamlit as st
# langchain is used to provide all the stuff required to build the chatbot
# this import provides messages for storing in context
from langchain_core.messages import AIMessage, HumanMessage
# load documents(data) from the web
from langchain_community.document_loaders import WebBaseLoader
# split text 
from langchain.text_splitter import RecursiveCharacterTextSplitter
# vector database for storing embeddings
from langchain_community.vectorstores import Chroma
# Model for generating embeddings and LLM 
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
# import environment from a file
from dotenv import load_dotenv
# Prompt templates to rewrite queries with cohtext(history and other)
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
# pipelines/chains required to generate the chat bot
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
# stuff multiple document/data sources into a single prompt
from langchain.chains.combine_documents import create_stuff_documents_chain

load_dotenv()

# Loads the content of a given URL, splits it into chunks, and stores the embeddings in a Chroma vector database
def get_vectorstore_from_url(url):
    loader = WebBaseLoader(url)
    document = loader.load()
    
    text_splitter = RecursiveCharacterTextSplitter()
    document_chunks = text_splitter.split_documents(document)
    
    vector_store = Chroma.from_documents(document_chunks, OpenAIEmbeddings())
    
    return vector_store

# Generate a retriever chain that retrieves data based on chat context
def get_context_retriever_chain(vector_store):
    llm = ChatOpenAI()
    retriever = vector_store.as_retriever()
    
    prompt = ChatPromptTemplate.from_messages([
        MessagesPlaceholder(variable_name="chat_history"),
        ("user", "{input}"),
        ("user", "Given the above conversation, generate a search query to look up in order to get information relevant to the conversation")
    ])
    
    retriever_chain = create_history_aware_retriever(llm, retriever, prompt)
    
    return retriever_chain

# Generate a rag chain that utilizes context generated by the retriever_chain provided in the input
def get_conversational_rag_chain(retriever_chain): 
    llm = ChatOpenAI()
    
    prompt = ChatPromptTemplate.from_messages([
        ("system", "Answer the user's questions based on the below context:\n\n{context}"),
        MessagesPlaceholder(variable_name="chat_history"),
        ("user", "{input}"),
    ])
    
    stuff_documents_chain = create_stuff_documents_chain(llm, prompt)
    
    return create_retrieval_chain(retriever_chain, stuff_documents_chain)

# Generate a response based on user input, chat context and website data
def get_response(user_input):
    retriever_chain = get_context_retriever_chain(st.session_state.vector_store)
    conversation_rag_chain = get_conversational_rag_chain(retriever_chain)
    
    response = conversation_rag_chain.invoke({
        "chat_history": st.session_state.chat_history,
        "input": user_input
    })
    
    return response['answer']

# Set up the Streamlit app
st.set_page_config(page_title="Chat with websites", page_icon="ðŸ¤–")
st.title("Chat with websites")

with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

if website_url is None or website_url == "":
    st.info("Please enter a website URL")
else:
    # Initialize chat context
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [
            AIMessage(content="Hello, I am a bot. How can I help you?"),
        ]
    # Initialize vector store with data from provided URL
    if "vector_store" not in st.session_state:
        st.session_state.vector_store = get_vectorstore_from_url(website_url)    
    
    user_query = st.chat_input("Type your message here...")
    if user_query is not None and user_query != "":
        response = get_response(user_query)
        
        st.session_state.chat_history.append(HumanMessage(content=user_query))
        st.session_state.chat_history.append(AIMessage(content=response))
        
    for message in st.session_state.chat_history:
        if isinstance(message, AIMessage):
            with st.chat_message("AI"):
                st.write(message.content)
        elif isinstance(message, HumanMessage):
            with st.chat_message("Human"):
                st.write(message.content)
